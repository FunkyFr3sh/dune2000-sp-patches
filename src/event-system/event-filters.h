typedef struct ObjectFilterStruct
{
  uint8_t pos_min_x;
  uint8_t pos_min_y;
  uint8_t pos_max_x;
  uint8_t pos_max_y;
  uint8_t pos_flags;
  uint8_t criteria_var_flags;
  uint16_t criteria_and_or;
  uint8_t criteria_type[8];
  uint8_t criteria_value[8];
} ObjectFilterStruct;

enum eObjectFilterPosFlags
{
  OBJFILTERPOSFLAG_DOCHECK = 1,
  OBJFILTERPOSFLAG_NEGATE = 2,
  OBJFILTERPOSFLAG_MINX_VAR = 4,
  OBJFILTERPOSFLAG_MINY_VAR = 8,
  OBJFILTERPOSFLAG_MAXX_VAR = 16,
  OBJFILTERPOSFLAG_MAXY_VAR = 32
};

typedef enum eUnitFilterCriteriaType
{
  UNITCRITERIATYPE_NONE,
  UNITCRITERIATYPE_TYPE,
  UNITCRITERIATYPE_GROUP,
  UNITCRITERIATYPE_BEHAVIOR,
  UNITCRITERIATYPE_CATEGORY,
  UNITCRITERIATYPE_TAG,
  UNITCRITERIATYPE_OWNER_SIDE,
  UNITCRITERIATYPE_ARMOR,
  UNITCRITERIATYPE_SPEED_TYPE,
  UNITCRITERIATYPE_PRI_WEAPON,
  UNITCRITERIATYPE_SEC_WEAPON,
  UNITCRITERIATYPE_SIGHT,
  UNITCRITERIATYPE_RANGE,
  UNITCRITERIATYPE_SPEED,
  UNITCRITERIATYPE_RATE_OF_FIRE,
  UNITCRITERIATYPE_HP100_MAX,
  UNITCRITERIATYPE_HP100_CUR,
  UNITCRITERIATYPE_HEALTH_PERCENT,
  UNITCRITERIATYPE_FLAG,
  UNITCRITERIATYPE_STATE,
  UNITCRITERIATYPE_GROUPNO,
  UNITCRITERIATYPE_TILE_ATTRIB,
  UNITCRITERIATYPE_TILE_TERRAIN,
  UNITCRITERIATYPE_TILE_SPICE,
  UNITCRITERIATYPE_TILE_CONCOWN,
  UNITCRITERIATYPE_TILE_OWNER1,
  UNITCRITERIATYPE_TILE_OWNER2
} eUnitFilterCriteriaType;

typedef enum eUnitCategory
{
  UNITCATEGORY_INFANTRY,
  UNITCATEGORY_VEHICLE,
  UNITCATEGORY_LIGHT_VEH,
  UNITCATEGORY_HEAVY_VEH,
  UNITCATEGORY_SPECIAL,
  UNITCATEGORY_HAS_PRI_WEAPON,
  UNITCATEGORY_HAS_SEC_WEAPON,
  UNITCATEGORY_HAS_BARREL,
  UNITCATEGORY_CAN_BE_UPGRADED
} eUnitCategory;

typedef enum eBuildingFilterCriteriaType
{
  BUILDINGCRITERIATYPE_NONE,
  BUILDINGCRITERIATYPE_TYPE,
  BUILDINGCRITERIATYPE_GROUP,
  BUILDINGCRITERIATYPE_BEHAVIOR,
  BUILDINGCRITERIATYPE_CATEGORY,
  BUILDINGCRITERIATYPE_TAG,
  BUILDINGCRITERIATYPE_OWNER_SIDE,
  BUILDINGCRITERIATYPE_ARMOR,
  BUILDINGCRITERIATYPE_PRI_WEAPON,
  BUILDINGCRITERIATYPE_SEC_WEAPON,
  BUILDINGCRITERIATYPE_SIGHT,
  BUILDINGCRITERIATYPE_POWER_CONS,
  BUILDINGCRITERIATYPE_POWER_PROD,
  BUILDINGCRITERIATYPE_RANGE,
  BUILDINGCRITERIATYPE_RATE_OF_FIRE,
  BUILDINGCRITERIATYPE_HP100_MAX,
  BUILDINGCRITERIATYPE_HP100_CUR,
  BUILDINGCRITERIATYPE_HEALTH_PERCENT,
  BUILDINGCRITERIATYPE_FLAG,
  BUILDINGCRITERIATYPE_STATE,
  BUILDINGCRITERIATYPE_UPGRADES
} eBuildingFilterCriteriaType;

typedef enum eBuildingCategory
{
  BUILDINGCATEGORY_POWER_CONS,
  BUILDINGCATEGORY_POWER_PROD,
  BUILDINGCATEGORY_REQ_ENOUGH_POW
} eBuildingCategory;

typedef enum eCrateFilterCriteriaType
{
  CRATECRITERIATYPE_NONE,
  CRATECRITERIATYPE_TYPE,
  CRATECRITERIATYPE_IMAGE,
  CRATECRITERIATYPE_EXT_DATA,
  CRATECRITERIATYPE_EXT_DATA_BIT,
  CRATECRITERIATYPE_RESPAWN_TIMES,
  CRATECRITERIATYPE_TIME_TICKS,
  CRATECRITERIATYPE_TIME_SECS,
  CRATECRITERIATYPE_XPOS,
  CRATECRITERIATYPE_YPOS,
  CRATECRITERIATYPE_TILE_ATTRIB,
  CRATECRITERIATYPE_TILE_TERRAIN,
  CRATECRITERIATYPE_TILE_SPICE,
  CRATECRITERIATYPE_TILE_CONCOWN,
  CRATECRITERIATYPE_TILE_OWNER1,
  CRATECRITERIATYPE_TILE_OWNER2
} eCrateFilterCriteriaType;

typedef enum eTileFilterCriteriaType
{
  TILECRITERIATYPE_NONE,
  TILECRITERIATYPE_DAMAGE,
  TILECRITERIATYPE_SHROUD,
  TILECRITERIATYPE_XPOS,
  TILECRITERIATYPE_YPOS,
  TILECRITERIATYPE_ATTRIB,
  TILECRITERIATYPE_TERRAIN,
  TILECRITERIATYPE_SPICE,
  TILECRITERIATYPE_CONCOWN,
  TILECRITERIATYPE_OWNER1,
  TILECRITERIATYPE_OWNER2,
  TILECRITERIATYPE_UNIT_TYPE,
  TILECRITERIATYPE_UNIT_TAG,
  TILECRITERIATYPE_BUILDING_TYPE,
  TILECRITERIATYPE_BUILDING_TAG
} eTileFilterCriteriaType;

bool CheckIfUnitMatchesFilter(ObjectFilterStruct *filter, Unit *unit);
bool CheckIfBuildingMatchesFilter(ObjectFilterStruct *filter, Building *building, eSideType side_id);
bool CheckIfCrateMatchesFilter(ObjectFilterStruct *filter, CrateStruct *crate);
bool CheckIfTileMatchesFilter(ObjectFilterStruct *filter, GameMapTileStruct *tile, int pos_x, int pos_y, bool check_pos);
